package com.suryoday.payment.payment;

import java.util.Base64;

import org.json.JSONObject;
import org.json.XML;

import com.suryoday.connector.rd.util.EncryptDecryptHelper;

public class TimeStampClass {

	public static void main(String[] args) {
		String sendEkyc = "<Response xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><ResponseData><KycResponse><TransactionInfo><Pan>6080220524696165533</Pan><Proc_Code>130000</Proc_Code><Transm_Date_time>0817231016</Transm_Date_time><Stan>1860</Stan><Local_Trans_Time>101600</Local_Trans_Time><Local_date>0817</Local_date><AcqId>200217</AcqId><RRN>6080221860</RRN><ResponseCode>99</ResponseCode><ResponseMsg>Data Error</ResponseMsg><CA_Tid>register</CA_Tid><CA_ID>SRY000000008000</CA_ID><CA_TA>Koramangala 2nd Block BANGALORE KAIN</CA_TA></TransactionInfo><Resp><kycRes>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PEt5Y1JlcyBjb2RlPSIzNjcyYzJhZDE2NDM0NDMxOWNmNWNkZjE5NWQ3Yjk1NiIgZXJyPSJLLTYwNiIgcmV0PSJOIiB0cz0iMjAyMy0wOC0xN1QxMDoxNjoyMS45MzYrMDU6MzAiIHR4bj0iVUtDOjE4NjAyMDIzMDgxNyI+PFJhcj5QRDk0Yld3Z2RtVnljMmx2YmowaU1TNHdJaUJsYm1OdlpHbHVaejBpVlZSR0xUZ2lQejQ4UVhWMGFGSmxjeUJqYjJSbFBTSXpOamN5WXpKaFpERTJORE0wTkRNeE9XTm1OV05rWmpFNU5XUTNZamsxTmlJZ2FXNW1iejBpTURSN01ERXdNREl3TVRCd0swRXZaVmt6Y1ZJMlUzWTJla3hOVTBWYWJscHdVRmRETlhaRWFXVjVWSGRJUlZJemJuRnhiSGQyVW5adE1VUktVelJyVUZJck1YaEZlRkJUWkVoTUxFRXNaVE5pTUdNME5ESTVPR1pqTVdNeE5EbGhabUptTkdNNE9UazJabUk1TWpReU4yRmxOREZsTkRZME9XSTVNelJqWVRRNU5UazVNV0kzT0RVeVlqZzFOU3d3TVRBd01EQXpNREF3TURBd01qRXdMREl1TUN3eU1ESXpNRGd4TnpFd01UWXdPQ3d4TERFc01Dd3dMREl1TlN3eE1XVm1OV000TXpZM056bGtZV1l6WldFeU5URXhOakV6TmpOa05UbGlOREF3WW1RNVkyRTFNVE0zTmpZNU5UWXhOR1l4TVdKak5qY3laV0l5TVRZNUxEUTBaREpoTWpoak1qY3dPV1l6TWpOaFl6QmtPV1EzWVRZeU1EUTRaVGN3TlRJeVpUQmlPRFV6T0Rrek1XWm1NVGswWWpRek5tWmlaVEptTnpOa05tUXNORFJrTW1FeU9HTXlOekE1WmpNeU0yRmpNR1E1WkRkaE5qSXdORGhsTnpBMU1qSmxNR0k0TlRNNE9UTXhabVl4T1RSaU5ETTJabUpsTW1ZM00yUTJaQ3hPUVN4T1FTeE9RU3hPUVN4T1FTeE9RU3hPUVN4T1FTeE9RU3hPUVN4eVpXZHBjM1JsY21Wa0xGTkRVRXd1UVU1RUxqQXdNU3d4TGpFdU55eE5iM0p3YUc4dVUyMWhjblJEYUdsd0xFMVRUekV6TURCRk1rd3dVMWNzVERBc09WRnZNR050YjBSQ2FYWjJhMk5WYXpsUmEwcG5OV1ZqV0hSS1JHaFViakUyYWxwalozUjJTSE4wVVQxOUlpQnlaWFE5SW5raUlIUnpQU0l5TURJekxUQTRMVEUzVkRFd09qRTJPakU1TGpjMU1Tc3dOVG96TUNJZ2RIaHVQU0pWUzBNNk1UZzJNREl3TWpNd09ERTNJajQ4VTJsbmJtRjBkWEpsSUhodGJHNXpQU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh5TURBd0x6QTVMM2h0YkdSemFXY2pJajQ4VTJsbmJtVmtTVzVtYno0OFEyRnViMjVwWTJGc2FYcGhkR2x2YmsxbGRHaHZaQ0JCYkdkdmNtbDBhRzA5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTDFSU0x6SXdNREV2VWtWRExYaHRiQzFqTVRSdUxUSXdNREV3TXpFMUlpOCtQRk5wWjI1aGRIVnlaVTFsZEdodlpDQkJiR2R2Y21sMGFHMDlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdk1Ea3ZlRzFzWkhOcFp5TnljMkV0YzJoaE1TSXZQanhTWldabGNtVnVZMlVnVlZKSlBTSWlQanhVY21GdWMyWnZjbTF6UGp4VWNtRnVjMlp2Y20wZ1FXeG5iM0pwZEdodFBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF3THpBNUwzaHRiR1J6YVdjalpXNTJaV3h2Y0dWa0xYTnBaMjVoZEhWeVpTSXZQand2VkhKaGJuTm1iM0p0Y3o0OFJHbG5aWE4wVFdWMGFHOWtJRUZzWjI5eWFYUm9iVDBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01TOHdOQzk0Yld4bGJtTWpjMmhoTWpVMklpOCtQRVJwWjJWemRGWmhiSFZsUGpNeGNXRkxTREJRWkc5RU1GVmxXbGh0VW1aR2N6VkdLellyT0RWV1drbHFlbFJSUVVKbVkzcEJjbU05UEM5RWFXZGxjM1JXWVd4MVpUNDhMMUpsWm1WeVpXNWpaVDQ4TDFOcFoyNWxaRWx1Wm04K1BGTnBaMjVoZEhWeVpWWmhiSFZsUGxKeWMwVkNRaXREU21kRlRYWXJWVVpTU0RGQ1JIWnZPVTUxYkV4bmVtaExjM0ZpZVdVcmVIUk5lWEZFZDJwVU0wUmtOMGRDVEd0b1YySTNRMEVyZUUxc2FGSnFNbXhrVG01SGRETUthVzkxUTBOUU1EWk9WVmxzTkhWYWFVVmtWemx0VDNvNVF5OTNhMlpzTTBKQlNFaFFTQzl0UjFWMFUyVk9hakJKVVhkQ09HcHZXa015WWtweU9VWXphMGgzVFVwek1YSjVlRzlpWVFwc2FEVmpiVlZIVmpBeFJpdGFkblZrTTBOVWNqaG1aSFpEVDFoblQxWllkbEp0TjNwaUsycGFkRkpJY1ZZM2JsWnVjSElyUlhCcFFrcG1PVkoxVUhsTWJHVTNZUzlKVmxWNk9YUnFDamxJUm1Zclp6bDVVbHBRVkdjclkwRjRXSEZNWm5JNVJFdHRNa0paVTIxNVl6RmxjazFGZUdGbmIwaFhRVk5CTVVKQ09IbE5jQ3RLUkc5NVprcHdOVnAxYVRWc2FXeEZabWx0YkUwS1RtdGlWbGx6UVhCT1VIbFdVbGRVVEZvdlZYQm1iVXBNTm1WcWRIUnpMM2R1UVdOVlpGRTlQVHd2VTJsbmJtRjBkWEpsVm1Gc2RXVStQQzlUYVdkdVlYUjFjbVUrUEM5QmRYUm9VbVZ6UGc9PTwvUmFyPjxTaWduYXR1cmUgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxTaWduZWRJbmZvPjxDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUiLz48U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+PFJlZmVyZW5jZSBVUkk9IiI+PFRyYW5zZm9ybXM+PFRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8+PC9UcmFuc2Zvcm1zPjxEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiLz48RGlnZXN0VmFsdWU+M2psYVIvaEhyTlZWY2U2VE9ZWGE0b2I4RmZtSTlNRjJ1MmMrRVZybkduaz08L0RpZ2VzdFZhbHVlPjwvUmVmZXJlbmNlPjwvU2lnbmVkSW5mbz48U2lnbmF0dXJlVmFsdWU+Um43YS8yL25mamRkSGVMSWlqSWFCLzMzUEFzYkN4Um5zbTI5ajhSUTZnUjhaUlBlUnU0UC95Y2tUNm41Vk02NXlIajk4VGRpb1BtOAp5UElRYmhTcFB4emZVQkdITDFqNWV3SWdDQmVhNWhGMFBiVlV5bzR6WnVuWGZ0NmtySHIrVTJrNDA4M3JnK0NTWjhIZnNJMmw1OHo2Ci9Qcm01a0NmWjNObUVGU1BzN1dnRFVCdlAxZ0Y5S1ZZYW1lTjFjd3ZuNmxGOHBsTjlNeHJodXgzSEovSHo2czBFZFRsTlBqUVdBcXAKcVFvejVTYTJXTGdzRzZEeUxRSWxXUWFkWC9aanplYUZEMU1xYTJ3NXdLaFdxcTJYVWZmdG85WkE4VFRGWTlxUnA5TExjQ09VV2cybwpBU2RXS0dXdjhpUzkzVGdsdGhsVU9MUFhySDJvaFdiUFpsbEIxdz09PC9TaWduYXR1cmVWYWx1ZT48S2V5SW5mbz48WDUwOURhdGE+PFg1MDlTdWJqZWN0TmFtZT4xLjIuODQwLjExMzU0OS4xLjkuMT0jMTYxNjYxNjQ2MTc1NzQ2ODJlNzQ2MzQwNzU2OTY0NjE2OTJlNmU2NTc0MmU2OTZlLEw9QmFuZ2Fsb3JlLENOPVVJREFJLE89VUlEQUksT1U9VGVjaG5vbG9neSBDZW50cmUsU1Q9S2FybmF0YWthLEM9SU48L1g1MDlTdWJqZWN0TmFtZT48WDUwOUNlcnRpZmljYXRlPk1JSUZ0ekNDQkorZ0F3SUJBZ0lHTjBDck9LWXZNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1JSGhNUXN3Q1FZRFZRUUdFd0pKVGpFbU1DUUcKQTFVRUNoTWRWbVZ5WVhONWN5QlVaV05vYm05c2IyZHBaWE1nVUhaMElFeDBaQzR4SFRBYkJnTlZCQXNURkVObGNuUnBabmxwYm1jZwpRWFYwYUc5eWFYUjVNUTh3RFFZRFZRUVJFd1kwTURBd01qVXhGREFTQmdOVkJBZ1RDMDFoYUdGeVlYTm9kSEpoTVJJd0VBWURWUVFKCkV3bFdMbE11SUUxaGNtY3hNakF3QmdOVkJETVRLVTltWm1salpTQk9ieTRnTWpFc0lESnVaQ0JHYkc5dmNpd2dRbWhoZG01aElFSjEKYVd4a2FXNW5NUnd3R2dZRFZRUURFeE5XWlhKaGMzbHpJRk4xWWlCRFFTQXlNREl5TUI0WERUSXpNRFF5T0RBNU5EQTBObG9YRFRJMgpNRFF5T0RBNU5EQTBObG93Z1pneEN6QUpCZ05WQkFZVEFrbE9NUkl3RUFZRFZRUUlFd2xMWVhKdVlYUmhhMkV4R2pBWUJnTlZCQXNUCkVWUmxZMmh1YjJ4dloza2dRMlZ1ZEhKbE1RNHdEQVlEVlFRS0V3VlZTVVJCU1RFT01Bd0dBMVVFQXhNRlZVbEVRVWt4RWpBUUJnTlYKQkFjVENVSmhibWRoYkc5eVpURWxNQ01HQ1NxR1NJYjNEUUVKQVJZV1lXUmhkWFJvTG5SalFIVnBaR0ZwTG01bGRDNXBiakNDQVNJdwpEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTGVub3VFSjNuTzF0cDFqV0d0M2VzOERjMHo3YXg2SUlkWWdMK3RzCm5Wb09LeFNsR0JvY1QrL2JJVEpuTTNmeEgvSW8vTHFGRkZTcndvNTkwQzhWWjZ6cW9VR01qUXA5RlcxTU5WbC9EWTlTSWpXa2hUS0YKN1M2cWhick00M3B4cFM0amJ4aUcyQU1ETXZMWHlEb09uVVhGeFRmdDN5SzFsWnpzK3psQU9kN1NKQlVNbGRJQ0U4TGNhcXlyWjEwQQpHN2dDQzRkV0lsVlRCK0JmemRBb2NlZE5MV2FRSHpCbEVBU3BNR3o5bzAzTVBBOE9MM2VqTVNwYzYrTkRlVFdHaHR6WU1mOXdFa2pvCjh6M0RiMHlEK2RsK3FkL2RyNEpnc1NtMzNPL1NIWkFmTkVNYXBUenJJUU0wdVJPZEpPYmVXRHBYTjA4NnR5YXZVNURmdnpWMU5zVUMKQXdFQUFhT0NBYm93Z2dHMk1FQUdBMVVkSlFRNU1EY0dDaXNHQVFRQmdqY1VBZ0lHQ0NzR0FRVUZCd01FQmdvckJnRUVBWUkzQ2dNTQpCZ2txaGtpRzl5OEJBUVVHQ0NzR0FRVUZCd01DTUJNR0ExVWRJd1FNTUFxQUNFMHVXT0dGTGY2S01IQUdDQ3NHQVFVRkJ3RUJCR1F3CllqQWdCZ2dyQmdFRkJRY3dBWVlVYUhSMGNEb3ZMMjlqYzNBdWRuTnBaMjR1YVc0d1BnWUlLd1lCQlFVSE1BS0dNbWgwZEhCek9pOHYKZDNkM0xuWnphV2R1TG1sdUwzSmxjRzl6YVhSdmNua3Zkbk5wWjI1emRXSmpZVEl3TWpJdVkyVnlNSUdMQmdOVkhTQUVnWU13Z1lBdwpkQVlHWUlKa1pBSURNR293THdZSUt3WUJCUVVIQWdFV0kyaDBkSEJ6T2k4dmQzZDNMblp6YVdkdUxtbHVMM0psY0c5emFYUnZjbmt2ClkzQnpNRGNHQ0NzR0FRVUZCd0lDTUNzYUtVTnNZWE56SUVsSlNTQlBjbWRoYm1sNllYUnBiMjRnVTJsbmJtVnlJRU5sY25ScFptbGoKWVhSbE1BZ0dCbUNDWkdRQ0FqQXZCZ05WSFI4RUtEQW1NQ1NnSXFBZ2hoNW9kSFJ3Y3pvdkwyTmhMblp6YVdkdUxtbHVMMk55YkdSegpZekl3TWpJd0VRWURWUjBPQkFvRUNFMi8wUDV3VGJwL01BNEdBMVVkRHdFQi93UUVBd0lHd0RBSkJnTlZIUk1FQWpBQU1BMEdDU3FHClNJYjNEUUVCQ3dVQUE0SUJBUUFYM1lSYXVXQmV6NWtMNGREUm1FdU5RMTdIL2ZPTmJUT2ZQaXpzSk04YzlpUzlrREprMmM0ZkpsWG4KTTBRUWNLUEdVVG82Zkl1UXlpU2pDb0VPcnBMdWJWTUNSWVlvdUkwdFlJNGd3SnJZNlVMVG1TYTYwR3hadWZHdzlDeW9HeTh1bVE5RwpFemlpM3drT1RvV3V6QXFhaC9JRFBYMllsVEw2aGRsZThkZk9EY2JvVHMrYXc0aHd0dGpPdy9lajQrcnZiOVNjV2M5Yks2cysyb3FZCjg3Z1pqaS9FSndtS2xwdjZsT3VydzRGK1hSa2lTNWtlQjVyNHZZRU8yYURZNTZRclJTMVBpM3JYRjI4cldWOUdDelZ3ZjBQazIzQUwKQVpQSnpCbFhZOCtteEZ3eERsNGFTYisyTDNnVE1INHZ6dHlHYUcvS0NqZlF3TXF1dW9OVjFqWkg8L1g1MDlDZXJ0aWZpY2F0ZT48L1g1MDlEYXRhPjwvS2V5SW5mbz48L1NpZ25hdHVyZT48L0t5Y1Jlcz4=</kycRes></Resp></KycResponse></ResponseData><HsmData /><ResponseMessage>Data Error</ResponseMessage><ResponseCode>99</ResponseCode><Response1 /><Response2 /></Response>";
		org.json.JSONObject jsonConverted1 = XML.toJSONObject(sendEkyc);
		String response = jsonConverted1.toString();
		JSONObject jsonAPIResponse = new JSONObject(response);
		if (jsonAPIResponse.has("Response")) {
			org.json.JSONObject jsonObject = jsonAPIResponse.getJSONObject("Response");
			String hsmData = jsonAPIResponse.getJSONObject("Response").getString("HsmData");
			System.out.println(hsmData);
			try {
				String KEY = "B9049FAF3B35762087749A0F3C553226";
				byte[] bytesToDecrypt = Base64.getDecoder().decode(hsmData);

				String decrypt = EncryptDecryptHelper.decrypt(KEY.getBytes(), bytesToDecrypt);
				System.out.println(decrypt);
				org.json.JSONObject jsonConverted2 = XML.toJSONObject(decrypt);
				System.out.println(jsonConverted2);
			} catch (Exception e) {

				e.printStackTrace();
			}
			// System.out.println(decrypt);
		}

	}

}
